[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Spotify Audio Feature Analysis:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSPOTIFY TOP 50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction:\n\n\n\n\n\n\nmusic\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 2, 2024\n\n\nMalintzin Blanco\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 27, 2024\n\n\nTristan Oâ€™Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/TEMPO.html",
    "href": "posts/welcome/TEMPO.html",
    "title": "SPOTIFY TOP 50",
    "section": "",
    "text": "import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\nimport pandas as pd\n\n# Set up your credentials\nclient_id = '65da108bf5264338923828f386e46acd'\nclient_secret = '12fa81f51ba54420b18eedd354575dc4'\n\n# Authenticate with Spotify\nclient_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\nimport pandas as pd\n\n\n# Get the global top 50 playlist\nplaylist_id = \"37i9dQZEVXbMDoHDwVN2tF\"  # Spotify Global Top 50 playlist ID\nplaylist_tracks = sp.playlist_tracks(playlist_id)\n\n# Extract track details and audio features\ntrack_data = []\nfor item in playlist_tracks['items']:\n    track = item['track']\n    track_id = track['id']\n    track_name = track['name']\n    artist_name = track['artists'][0]['name']\n    album_name = track['album']['name']\n    release_date = track['album']['release_date']\n    popularity = track['popularity'] \n    \n    # Fetch audio features for the track\n    audio_features = sp.audio_features(track_id)[0]\n    \n    # Combine track details with audio features\n    track_data.append({\n        'Track Name': track_name,\n        'Artist': artist_name,\n        'Album': album_name,\n        'Release Date': release_date,\n        'Popularity': popularity,\n        **audio_features\n    })\n\n# Convert to DataFrame for analysis\ntop50_df = pd.DataFrame(track_data)\n\n# Drop unwanted columns\ncolumns_to_drop = ['id', 'uri', 'track_href', 'analysis_url', 'type']\ntop50_df.drop(columns=columns_to_drop, inplace=True)\n\n# Save the DataFrame to a CSV file\ncsv_file_path = 'Spotify_Global_Top50_Audio_Features.csv'\ntop50_df.to_csv(csv_file_path, index=False)\n\n# Display the first few rows of the DataFrame to confirm\ntop50_df.head()\n\n\n\n\n\n\n\n\nTrack Name\nArtist\nAlbum\nRelease Date\nPopularity\ndanceability\nenergy\nkey\nloudness\nmode\nspeechiness\nacousticness\ninstrumentalness\nliveness\nvalence\ntempo\nduration_ms\ntime_signature\n\n\n\n\n0\nWho\nJimin\nMUSE\n2024-07-19\n93\n0.660\n0.756\n0\n-3.743\n0\n0.0320\n0.00289\n0.000000\n0.1930\n0.838\n116.034\n170888\n4\n\n\n1\nBIRDS OF A FEATHER\nBillie Eilish\nHIT ME HARD AND SOFT\n2024-05-17\n99\n0.747\n0.507\n2\n-10.171\n1\n0.0358\n0.20000\n0.060800\n0.1170\n0.438\n104.978\n210373\n4\n\n\n2\nEspresso\nSabrina Carpenter\nEspresso\n2024-04-12\n99\n0.701\n0.760\n0\n-5.478\n1\n0.0285\n0.10700\n0.000065\n0.1850\n0.690\n103.969\n175459\n4\n\n\n3\nPlease Please Please\nSabrina Carpenter\nPlease Please Please\n2024-06-06\n98\n0.669\n0.586\n9\n-6.073\n1\n0.0540\n0.27400\n0.000000\n0.1040\n0.579\n107.071\n186365\n4\n\n\n4\nGood Luck, Babe!\nChappell Roan\nGood Luck, Babe!\n2024-04-05\n96\n0.700\n0.582\n11\n-5.960\n0\n0.0356\n0.05020\n0.000000\n0.0881\n0.785\n116.712\n218424\n4\n\n\n\n\n\n\n\n\nimport pandas as pd\n\n# Load the dataset\nspotify_df_global = pd.read_csv('Spotify_Global_Top50_Audio_Features.csv')\n\n# Calculate the 95th and 99th percentile values for Popularity\npercentile_95 = spotify_df_global['Popularity'].quantile(0.95)\npercentile_99 = spotify_df_global['Popularity'].quantile(0.99)\n\n# Filter the dataset to include only the rows within the 95th to 99th percentile\nfiltered_data = spotify_df_global[(spotify_df_global['Popularity'] &gt;= percentile_95) & (spotify_df_global['Popularity'] &lt;= percentile_99)]\n\n# Define the feature columns for which to calculate the mean\nfeature_columns = ['danceability', 'energy', 'valence', 'tempo']\n\n# Calculate the mean of each feature within the filtered data\nmean_scores = filtered_data[feature_columns].mean()\n\nprint(\"Mean Scores of Features in the 95th to 99th Percentile of Popularity:\")\nprint(mean_scores)\n\nMean Scores of Features in the 95th to 99th Percentile of Popularity:\ndanceability      0.705667\nenergy            0.617667\nvalence           0.569000\ntempo           105.339333\ndtype: float64\n\n\n\nimport pandas as pd\n\nspotify_df_global = pd.read_csv('Spotify_Global_Top50_Audio_Features.csv')\n\nbottom_scores_global = spotify_df_global[spotify_df_global['Popularity'].between(70,80)]\n\nfeature_columns = ['danceability', 'energy', 'valence', 'tempo']  # Adjust if needed\n\nprint(bottom_scores_global[[ 'Popularity'] + feature_columns])\n\n    Popularity  danceability  energy  valence    tempo\n26          77         0.599   0.946    0.747  151.647\n31          78         0.464   0.745    0.262  180.098\n\n\n\nspotify_df_2000 = pd.read_csv('Spotify-2000.csv')\nspotify_df_median = spotify_df_2000[['Danceability', 'Energy', 'Valence', 'Beats Per Minute (BPM)']].median()\nprint(spotify_df_median)\n\nspotify_df_global_median = spotify_df_global[['danceability', 'energy', 'valence', 'tempo']].median()\nprint(spotify_df_global_median)\n\nDanceability               53.0\nEnergy                     61.0\nValence                    47.0\nBeats Per Minute (BPM)    119.0\ndtype: float64\ndanceability      0.664\nenergy            0.637\nvalence           0.569\ntempo           120.026\ndtype: float64\n\n\n\nimport pandas as pd\n\n# Load the datasets\nspotify_df_2000 = pd.read_csv('Spotify-2000.csv')\nspotify_df_global = pd.read_csv('Spotify_Global_Top50_Audio_Features.csv')\n\n  \n# Scale up the normalized median values for Danceability, Energy, and Valence\nscaled_median_2000s = spotify_df_median[['Danceability', 'Energy', 'Valence']] * 1  # Multiply by 100 to match the original scale\n\n# Ensure that the Top 50 Median Scores are correctly scaled for consistency (excluding Tempo)\nscaled_median_top50 = spotify_df_global_median[['danceability', 'energy', 'valence']] * 100\n\n# Add Tempo back to the DataFrame without scaling\nscaled_median_2000s['Tempo'] = spotify_df_median['Beats Per Minute (BPM)']\nscaled_median_top50['Tempo'] = spotify_df_global_median['tempo']\n\n# Create a DataFrame to compare the scaled medians\ncomparison_df = pd.DataFrame({\n    '2000s Median Scores': scaled_median_2000s.values,\n    'Top 50 Median Scores': scaled_median_top50.values\n})\n\n# Adjust index to match the features' names\ncomparison_df.index = ['Danceability', 'Energy', 'Valence', 'Tempo']\n\n# Display the comparison\nprint(comparison_df)\n\n              2000s Median Scores  Top 50 Median Scores\nDanceability                 53.0                66.400\nEnergy                       61.0                63.700\nValence                      47.0                56.900\nTempo                       119.0               120.026\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ncomparison_df = pd.DataFrame({\n    '2000s Median Scores': scaled_median_2000s.values,\n    'Top 50 Median Scores': scaled_median_top50.values\n})\ncomparison_df.index = ['Danceability', 'Energy', 'Valence', 'Tempo']\n\n# Plotting the comparison\nplt.figure(figsize=(10, 6))\ncomparison_df.plot(kind='bar', color=['skyblue', 'green'], edgecolor='black')\n\nplt.title('Comparison of Median Audio Features: 2000s vs Top 50 Global Songs')\nplt.xlabel('Audio Features')\nplt.ylabel('Median Scores')\nplt.xticks(rotation=0)\nplt.ylim(0, max(comparison_df.max()) + 20)  # Set y-axis limit slightly above the maximum value\nplt.grid(axis='y')\n\nplt.show()\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nspotify_df_2000 = pd.read_csv('Spotify-2000.csv')\nspotify_df_global = pd.read_csv('Spotify_Global_Top50_Audio_Features.csv')\n\n# Calculate the mean for each feature in the Spotify 2000 dataset\nmean_2000s = spotify_df_2000[['Danceability', 'Energy', 'Valence', 'Beats Per Minute (BPM)']].mean()\n\n# Calculate the mean for each feature in the Top 50 Global dataset\nmean_top50 = spotify_df_global[['danceability', 'energy', 'valence', 'tempo']].mean()\n\n# Scale only 'danceability', 'energy', and 'valence' but not 'tempo'\nscaled_mean_top50 = mean_top50.copy()\nscaled_mean_top50[['danceability', 'energy', 'valence']] *= 100\n\n# Create a DataFrame to compare the means\nmean_comparison_df = pd.DataFrame({\n    '2000s Mean Scores': mean_2000s.values,\n    'Top 50 Mean Scores': scaled_mean_top50.values\n})\n\n# Adjust index to match the features' names\nmean_comparison_df.index = ['Danceability', 'Energy', 'Valence', 'Tempo']\n\n# Display the comparison DataFrame\nprint(mean_comparison_df)\n# Adjust index to match the features' names\nmean_comparison_df.index = ['Danceability', 'Energy', 'Valence', 'Tempo']\n\n# Plotting the comparison\nplt.figure(figsize=(10, 6))\nmean_comparison_df.plot(kind='bar', color=['lightblue', 'green'], edgecolor='black')\n\nplt.title('Comparison of Mean Audio Features: 2000s vs Top 50 Global Songs')\nplt.xlabel('Audio Features')\nplt.ylabel('Mean Scores')\nplt.xticks(rotation=0)\nplt.ylim(0, 130)  # Set y-axis limit to 120\nplt.grid(axis='y')\n\nplt.show()\n\n              2000s Mean Scores  Top 50 Mean Scores\nDanceability          53.238215            66.30200\nEnergy                59.679539            64.13000\nValence               49.408726            56.15160\nTempo                120.215647           123.91218\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nThe analysis then transitions to comparing the median and mean audio features between the two datasets. The bar charts visually summarize these comparisons, highlighting differences in median and mean scores for Danceability, Energy, Valence, and Tempo.\nThis bar chart vividly illustrates the tempo variations among these top tracks, which do not vary widely, suggesting a consistency in tempo among the most popular songs globally.\n\ntop50_df = pd.read_csv('Spotify_Global_Top50_Audio_Features.csv')\n\n# Extract the top 10 songs based on popularity\ntop_10_songs = top50_df.nlargest(5, 'Popularity')\n\nplt.figure(figsize=(12, 6))\n\n# Bar plot for BPM\nsns.barplot(x=top_10_songs['Track Name'], y=top_10_songs['tempo'])\n\nplt.title('BPM of Top 10 Songs in Global Top 50')\nplt.xlabel('Track Name')\nplt.ylabel('Beats Per Minute (BPM)')\nplt.xticks(rotation=45, ha='right')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nspotify_df = pd.read_csv('Spotify-2000.csv')\n\n# Extract the top 10 songs based on popularity\ntop_10_songs =spotify_df.nlargest(5, 'Popularity')\n\n# Create a plot\nplt.figure(figsize=(12, 6))\n\n# Bar plot for BPM\nsns.barplot(x=top_10_songs['Title'], y=top_10_songs['Beats Per Minute (BPM)'])\n\n\n# Adding titles and labels\nplt.xlabel('Track Name')\nplt.ylabel('Beats Per Minute (BPM)')\nplt.xticks(rotation=50, ha='right')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nspotify_df_2000 = pd.read_csv('Spotify-2000.csv')\n\n# Plot the distribution of BPM in the 2000s dataset\nplt.figure(figsize=(10, 6))\nsns.histplot(spotify_df_2000['Beats Per Minute (BPM)'], bins=30, kde=True, color='blue')\n\n# Adding titles and labels\nplt.title('Distribution of BPM in the 2000s Dataset')\nplt.xlabel('Beats Per Minute (BPM)')\nplt.ylabel('Frequency')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Histogram to visualize the distribution of BPM\nplt.figure(figsize=(10, 6))\nsns.histplot(top50_df['tempo'], bins=30, kde=True)\nplt.title('BPM Distribution in Global Top 50')\nplt.xlabel('BPM')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.show()\n\n# Analyzing common BPM peaks\nbpm_peaks = top50_df['tempo'].value_counts().sort_values(ascending=False)\nprint(bpm_peaks.head(10))\n\n\n\n\n\n\n\n\ntempo\n116.034    1\n104.978    1\n103.969    1\n107.071    1\n116.712    1\n128.027    1\n101.061    1\n99.986     1\n105.029    1\n80.969     1\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/Project.html",
    "href": "posts/Project.html",
    "title": "Spotify Audio Feature Analysis:",
    "section": "",
    "text": "### A Comparative Analysis of Top 2000s, Global Top 5, and Notable Artists ## INTRODUCTION\nResearch Motivation:\nThis analysis provides an exciting opportunity to delve into the evolution of popular music and identify the characteristics that contribute to a songâ€™s success. This analysis offers a compelling opportunity to examine the evolution of musical characteristics and their relationship with popularity over several decades. The insights derived from this analysis will not only enhance our understanding of the trajectory of popular music but also provide valuable context for anticipating future trends in the music landscape.\nResearch Questions:\nThis research seeks to address several critical questions:\nWhat characteristics are common among the most popular songs?\nHow have trends in music shifted over time?\nAre there specific artists or genres that consistently produce top hits?\nTo what extent can popularity be predicted based on these characteristics?\nData Overview:\nThe analysis draws upon two distinct datasets that offer a comprehensive view of both historical and contemporary music trends.\nThe primary dataset, Spotify - All Time Top 2000s Mega Dataset, comprises the top 2000 tracks on Spotify, spanning releases from 1956 to 2019. This dataset features tracks from iconic artists such as Queen, The Beatles, and Guns Nâ€™ Roses, and includes a rich array of audio features that provide a deep dive into the characteristics that have defined popular music over the last 60 years.\nTo complement the historical analysis, a secondary dataset was extracted using the Spotify API, capturing audio features for the top 50 songs currently trending globally on Spotify. This real-time dataset offers a snapshot of contemporary musical preferences, serving as a critical point of comparison to assess how current trends align or diverge from those observed in previous decades.\nFeature Descriptions\nBoth datasets encompass a set of key features essential for this analysis:\nArtist: The performer of the track.\nTop Genre: The genre classification of the track.\nYear: The release year of the track.\nBeats per Minute (BPM): The tempo of the song.\nEnergy: A measure of the trackâ€™s intensity and activity.\nDanceability: Indicates the suitability of the song for dancing.\nLoudness: The volume level of the track.\nValence: Reflects the positivity of the songâ€™s mood.\nLength: The duration of the track.\nAcousticness: The degree to which the song is acoustic.\nSpeechiness: The amount of spoken word content in the song.\nPopularity: A measure of the songâ€™s popularity on Spotify.\n\nANALYSIS\nFeature Insights:\nTempo and Energy: Despite shifts in musical genres, tempo has remained a consistent feature in popular music. Our analysis shows that tempo, coupled with energy, often dictates a trackâ€™s ability to engage listeners.\nValence and Danceability: These features correlate with the emotional and physical engagement of listeners, often higher in songs that achieve widespread popularity. Comparative Analysis:\nHistorical vs.Â Contemporary: By comparing datasets from the 2000s to 2024, we noticed subtle shifts in the average energy and danceability, suggesting a trend towards more vibrant and rhythmic music.\nArtist Impact: Artists like Taylor Swift and Coldplay have demonstrated versatility in adapting their musical styles to maintain relevance across different musical eras."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]